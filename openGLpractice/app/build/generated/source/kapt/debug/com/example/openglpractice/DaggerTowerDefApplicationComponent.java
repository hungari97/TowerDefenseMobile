// Generated by Dagger (https://google.github.io/dagger).
package com.example.openglpractice;

import com.example.openglpractice.model.interactor.BuildInteractor;
import com.example.openglpractice.model.interactor.InteractorModule;
import com.example.openglpractice.model.interactor.InteractorModule_BuildInteractorFactory;
import com.example.openglpractice.presenter.GamePresenter;
import com.example.openglpractice.view.GameActivity;
import com.example.openglpractice.view.GameActivity_MembersInjector;
import com.example.openglpractice.view.UIModule;
import com.example.openglpractice.view.UIModule_GamePresenterFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerTowerDefApplicationComponent implements TowerDefApplicationComponent {
  private Provider<BuildInteractor> buildInteractorProvider;

  private Provider<GamePresenter> gamePresenterProvider;

  private DaggerTowerDefApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.buildInteractorProvider =
        DoubleCheck.provider(
            InteractorModule_BuildInteractorFactory.create(builder.interactorModule));
    this.gamePresenterProvider =
        DoubleCheck.provider(
            UIModule_GamePresenterFactory.create(builder.uIModule, buildInteractorProvider));
  }

  @Override
  public void inject(GameActivity gameActivity) {
    injectGameActivity(gameActivity);
  }

  private GameActivity injectGameActivity(GameActivity instance) {
    GameActivity_MembersInjector.injectGamePresenter(instance, gamePresenterProvider.get());
    return instance;
  }

  public static final class Builder {
    private InteractorModule interactorModule;

    private UIModule uIModule;

    private Builder() {}

    public TowerDefApplicationComponent build() {
      if (interactorModule == null) {
        this.interactorModule = new InteractorModule();
      }
      if (uIModule == null) {
        throw new IllegalStateException(UIModule.class.getCanonicalName() + " must be set");
      }
      return new DaggerTowerDefApplicationComponent(this);
    }

    public Builder uIModule(UIModule uIModule) {
      this.uIModule = Preconditions.checkNotNull(uIModule);
      return this;
    }

    public Builder interactorModule(InteractorModule interactorModule) {
      this.interactorModule = Preconditions.checkNotNull(interactorModule);
      return this;
    }
  }
}
